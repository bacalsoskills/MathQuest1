{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ferdi\\\\OneDrive\\\\Desktop\\\\Documents\\\\CAPSTONE\\\\frontend\\\\src\\\\context\\\\UserProgressContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProgressContext = /*#__PURE__*/createContext();\nexport const useUserProgress = () => {\n  _s();\n  return useContext(UserProgressContext);\n};\n_s(useUserProgress, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const UserProgressProvider = ({\n  children\n}) => {\n  _s2();\n  const [usersProgress, setUsersProgress] = useState([]);\n  const [badges, setBadges] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Initial badges\n  const initialBadges = [{\n    id: 1,\n    name: \"Quick Learner\",\n    description: \"Complete 5 practice problems\",\n    icon: \"⚡\",\n    points: 100\n  }, {\n    id: 2,\n    name: \"Master of Properties\",\n    description: \"Score 100% on a challenge\",\n    icon: \"🏆\",\n    points: 200\n  }, {\n    id: 3,\n    name: \"Practice Makes Perfect\",\n    description: \"Complete 10 practice problems\",\n    icon: \"📚\",\n    points: 300\n  }, {\n    id: 4,\n    name: \"Challenge Champion\",\n    description: \"Complete 5 challenges\",\n    icon: \"🎯\",\n    points: 400\n  }, {\n    id: 5,\n    name: \"Property Pro\",\n    description: \"Master all properties\",\n    icon: \"🌟\",\n    points: 500\n  }];\n  useEffect(() => {\n    setBadges(initialBadges);\n    setLoading(false);\n  }, []);\n  const updateUserProgress = (userId, progress) => {\n    setUsersProgress(prev => {\n      const existingUser = prev.find(u => u.userId === userId);\n      if (existingUser) {\n        return prev.map(u => u.userId === userId ? {\n          ...u,\n          ...progress\n        } : u);\n      }\n      return [...prev, {\n        userId,\n        ...progress\n      }];\n    });\n  };\n  const getUserProgress = userId => {\n    return usersProgress.find(u => u.userId === userId) || {\n      userId,\n      points: 0,\n      completedPractice: 0,\n      completedChallenges: 0,\n      badges: [],\n      lastActivity: null\n    };\n  };\n  const getLeaderboard = () => {\n    return [...usersProgress].sort((a, b) => b.points - a.points).slice(0, 10);\n  };\n  const awardBadge = (userId, badgeId) => {\n    const userProgress = getUserProgress(userId);\n    if (!userProgress.badges.includes(badgeId)) {\n      const badge = badges.find(b => b.id === badgeId);\n      updateUserProgress(userId, {\n        ...userProgress,\n        badges: [...userProgress.badges, badgeId],\n        points: userProgress.points + badge.points\n      });\n    }\n  };\n  const generateReport = userId => {\n    const userProgress = getUserProgress(userId);\n    return {\n      ...userProgress,\n      earnedBadges: badges.filter(b => userProgress.badges.includes(b.id)),\n      progressPercentage: Math.min((userProgress.completedPractice + userProgress.completedChallenges) / 20 * 100, 100)\n    };\n  };\n  const exportData = () => {\n    return {\n      usersProgress,\n      badges,\n      timestamp: new Date().toISOString()\n    };\n  };\n  const value = {\n    usersProgress,\n    badges,\n    updateUserProgress,\n    getUserProgress,\n    getLeaderboard,\n    awardBadge,\n    generateReport,\n    exportData,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(UserProgressContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s2(UserProgressProvider, \"lPagZfrZ5kHXWLEqXBCvepT+J0A=\");\n_c = UserProgressProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProgressProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","UserProgressContext","useUserProgress","_s","UserProgressProvider","children","_s2","usersProgress","setUsersProgress","badges","setBadges","loading","setLoading","initialBadges","id","name","description","icon","points","updateUserProgress","userId","progress","prev","existingUser","find","u","map","getUserProgress","completedPractice","completedChallenges","lastActivity","getLeaderboard","sort","a","b","slice","awardBadge","badgeId","userProgress","includes","badge","generateReport","earnedBadges","filter","progressPercentage","Math","min","exportData","timestamp","Date","toISOString","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ferdi/OneDrive/Desktop/Documents/CAPSTONE/frontend/src/context/UserProgressContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst UserProgressContext = createContext();\r\n\r\nexport const useUserProgress = () => useContext(UserProgressContext);\r\n\r\nexport const UserProgressProvider = ({ children }) => {\r\n  const [usersProgress, setUsersProgress] = useState([]);\r\n  const [badges, setBadges] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Initial badges\r\n  const initialBadges = [\r\n    { id: 1, name: \"Quick Learner\", description: \"Complete 5 practice problems\", icon: \"⚡\", points: 100 },\r\n    { id: 2, name: \"Master of Properties\", description: \"Score 100% on a challenge\", icon: \"🏆\", points: 200 },\r\n    { id: 3, name: \"Practice Makes Perfect\", description: \"Complete 10 practice problems\", icon: \"📚\", points: 300 },\r\n    { id: 4, name: \"Challenge Champion\", description: \"Complete 5 challenges\", icon: \"🎯\", points: 400 },\r\n    { id: 5, name: \"Property Pro\", description: \"Master all properties\", icon: \"🌟\", points: 500 }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setBadges(initialBadges);\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const updateUserProgress = (userId, progress) => {\r\n    setUsersProgress(prev => {\r\n      const existingUser = prev.find(u => u.userId === userId);\r\n      if (existingUser) {\r\n        return prev.map(u => u.userId === userId ? { ...u, ...progress } : u);\r\n      }\r\n      return [...prev, { userId, ...progress }];\r\n    });\r\n  };\r\n\r\n  const getUserProgress = (userId) => {\r\n    return usersProgress.find(u => u.userId === userId) || {\r\n      userId,\r\n      points: 0,\r\n      completedPractice: 0,\r\n      completedChallenges: 0,\r\n      badges: [],\r\n      lastActivity: null\r\n    };\r\n  };\r\n\r\n  const getLeaderboard = () => {\r\n    return [...usersProgress]\r\n      .sort((a, b) => b.points - a.points)\r\n      .slice(0, 10);\r\n  };\r\n\r\n  const awardBadge = (userId, badgeId) => {\r\n    const userProgress = getUserProgress(userId);\r\n    if (!userProgress.badges.includes(badgeId)) {\r\n      const badge = badges.find(b => b.id === badgeId);\r\n      updateUserProgress(userId, {\r\n        ...userProgress,\r\n        badges: [...userProgress.badges, badgeId],\r\n        points: userProgress.points + badge.points\r\n      });\r\n    }\r\n  };\r\n\r\n  const generateReport = (userId) => {\r\n    const userProgress = getUserProgress(userId);\r\n    return {\r\n      ...userProgress,\r\n      earnedBadges: badges.filter(b => userProgress.badges.includes(b.id)),\r\n      progressPercentage: Math.min(\r\n        ((userProgress.completedPractice + userProgress.completedChallenges) / 20) * 100,\r\n        100\r\n      )\r\n    };\r\n  };\r\n\r\n  const exportData = () => {\r\n    return {\r\n      usersProgress,\r\n      badges,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  };\r\n\r\n  const value = {\r\n    usersProgress,\r\n    badges,\r\n    updateUserProgress,\r\n    getUserProgress,\r\n    getLeaderboard,\r\n    awardBadge,\r\n    generateReport,\r\n    exportData,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <UserProgressContext.Provider value={value}>\r\n      {!loading && children}\r\n    </UserProgressContext.Provider>\r\n  );\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,mBAAmB,gBAAGN,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMO,eAAe,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,mBAAmB,CAAC;AAAA;AAACE,EAAA,CAAxDD,eAAe;AAE5B,OAAO,MAAME,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMiB,aAAa,GAAG,CACpB;IAAEC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,eAAe;IAAEC,WAAW,EAAE,8BAA8B;IAAEC,IAAI,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC,EACrG;IAAEJ,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,sBAAsB;IAAEC,WAAW,EAAE,2BAA2B;IAAEC,IAAI,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAI,CAAC,EAC1G;IAAEJ,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,wBAAwB;IAAEC,WAAW,EAAE,+BAA+B;IAAEC,IAAI,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAI,CAAC,EAChH;IAAEJ,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,oBAAoB;IAAEC,WAAW,EAAE,uBAAuB;IAAEC,IAAI,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAI,CAAC,EACpG;IAAEJ,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,cAAc;IAAEC,WAAW,EAAE,uBAAuB;IAAEC,IAAI,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAI,CAAC,CAC/F;EAEDpB,SAAS,CAAC,MAAM;IACdY,SAAS,CAACG,aAAa,CAAC;IACxBD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,kBAAkB,GAAGA,CAACC,MAAM,EAAEC,QAAQ,KAAK;IAC/Cb,gBAAgB,CAACc,IAAI,IAAI;MACvB,MAAMC,YAAY,GAAGD,IAAI,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,MAAM,KAAKA,MAAM,CAAC;MACxD,IAAIG,YAAY,EAAE;QAChB,OAAOD,IAAI,CAACI,GAAG,CAACD,CAAC,IAAIA,CAAC,CAACL,MAAM,KAAKA,MAAM,GAAG;UAAE,GAAGK,CAAC;UAAE,GAAGJ;QAAS,CAAC,GAAGI,CAAC,CAAC;MACvE;MACA,OAAO,CAAC,GAAGH,IAAI,EAAE;QAAEF,MAAM;QAAE,GAAGC;MAAS,CAAC,CAAC;IAC3C,CAAC,CAAC;EACJ,CAAC;EAED,MAAMM,eAAe,GAAIP,MAAM,IAAK;IAClC,OAAOb,aAAa,CAACiB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,MAAM,KAAKA,MAAM,CAAC,IAAI;MACrDA,MAAM;MACNF,MAAM,EAAE,CAAC;MACTU,iBAAiB,EAAE,CAAC;MACpBC,mBAAmB,EAAE,CAAC;MACtBpB,MAAM,EAAE,EAAE;MACVqB,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAO,CAAC,GAAGxB,aAAa,CAAC,CACtByB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAChB,MAAM,GAAGe,CAAC,CAACf,MAAM,CAAC,CACnCiB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EACjB,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAChB,MAAM,EAAEiB,OAAO,KAAK;IACtC,MAAMC,YAAY,GAAGX,eAAe,CAACP,MAAM,CAAC;IAC5C,IAAI,CAACkB,YAAY,CAAC7B,MAAM,CAAC8B,QAAQ,CAACF,OAAO,CAAC,EAAE;MAC1C,MAAMG,KAAK,GAAG/B,MAAM,CAACe,IAAI,CAACU,CAAC,IAAIA,CAAC,CAACpB,EAAE,KAAKuB,OAAO,CAAC;MAChDlB,kBAAkB,CAACC,MAAM,EAAE;QACzB,GAAGkB,YAAY;QACf7B,MAAM,EAAE,CAAC,GAAG6B,YAAY,CAAC7B,MAAM,EAAE4B,OAAO,CAAC;QACzCnB,MAAM,EAAEoB,YAAY,CAACpB,MAAM,GAAGsB,KAAK,CAACtB;MACtC,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMuB,cAAc,GAAIrB,MAAM,IAAK;IACjC,MAAMkB,YAAY,GAAGX,eAAe,CAACP,MAAM,CAAC;IAC5C,OAAO;MACL,GAAGkB,YAAY;MACfI,YAAY,EAAEjC,MAAM,CAACkC,MAAM,CAACT,CAAC,IAAII,YAAY,CAAC7B,MAAM,CAAC8B,QAAQ,CAACL,CAAC,CAACpB,EAAE,CAAC,CAAC;MACpE8B,kBAAkB,EAAEC,IAAI,CAACC,GAAG,CACzB,CAACR,YAAY,CAACV,iBAAiB,GAAGU,YAAY,CAACT,mBAAmB,IAAI,EAAE,GAAI,GAAG,EAChF,GACF;IACF,CAAC;EACH,CAAC;EAED,MAAMkB,UAAU,GAAGA,CAAA,KAAM;IACvB,OAAO;MACLxC,aAAa;MACbE,MAAM;MACNuC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;EACH,CAAC;EAED,MAAMC,KAAK,GAAG;IACZ5C,aAAa;IACbE,MAAM;IACNU,kBAAkB;IAClBQ,eAAe;IACfI,cAAc;IACdK,UAAU;IACVK,cAAc;IACdM,UAAU;IACVpC;EACF,CAAC;EAED,oBACEX,OAAA,CAACC,mBAAmB,CAACmD,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA9C,QAAA,EACxC,CAACM,OAAO,IAAIN;EAAQ;IAAAgD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEnC,CAAC;AAAClD,GAAA,CA/FWF,oBAAoB;AAAAqD,EAAA,GAApBrD,oBAAoB;AAAA,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}