{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ferdi\\\\OneDrive\\\\Desktop\\\\Documents\\\\CAPSTONE\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Hardcoded users for now\n  const users = [{\n    email: 'admin',\n    password: 'admin',\n    role: 'admin'\n  }, {\n    email: 'user',\n    password: 'user',\n    role: 'user'\n  }];\n  useEffect(() => {\n    // Check if user is already logged in (from localStorage)\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setCurrentUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = (email, password) => {\n    const user = users.find(u => u.email === email && u.password === password);\n    if (user) {\n      const userData = {\n        email: user.email,\n        role: user.role\n      };\n      setCurrentUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      return {\n        success: true,\n        user: userData\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Invalid email or password'\n      };\n    }\n  };\n  const register = (email, password) => {\n    // Check if user already exists\n    if (users.some(u => u.email === email)) {\n      return {\n        success: false,\n        error: 'User already exists'\n      };\n    }\n\n    // In a real app, you would add the user to a database\n    // For now, we'll just simulate success\n    return {\n      success: true\n    };\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('user');\n  };\n  const isAdmin = () => {\n    return currentUser && currentUser.role === 'admin';\n  };\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","users","email","password","role","storedUser","localStorage","getItem","JSON","parse","login","user","find","u","userData","setItem","stringify","success","error","register","some","logout","removeItem","isAdmin","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ferdi/OneDrive/Desktop/Documents/CAPSTONE/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Hardcoded users for now\r\n  const users = [\r\n    { email: 'admin', password: 'admin', role: 'admin' },\r\n    { email: 'user', password: 'user', role: 'user' }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in (from localStorage)\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setCurrentUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = (email, password) => {\r\n    const user = users.find(u => u.email === email && u.password === password);\r\n    \r\n    if (user) {\r\n      const userData = {\r\n        email: user.email,\r\n        role: user.role\r\n      };\r\n      \r\n      setCurrentUser(userData);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      return { success: true, user: userData };\r\n    } else {\r\n      return { success: false, error: 'Invalid email or password' };\r\n    }\r\n  };\r\n\r\n  const register = (email, password) => {\r\n    // Check if user already exists\r\n    if (users.some(u => u.email === email)) {\r\n      return { success: false, error: 'User already exists' };\r\n    }\r\n    \r\n    // In a real app, you would add the user to a database\r\n    // For now, we'll just simulate success\r\n    return { success: true };\r\n  };\r\n\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const isAdmin = () => {\r\n    return currentUser && currentUser.role === 'admin';\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAdmin\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}