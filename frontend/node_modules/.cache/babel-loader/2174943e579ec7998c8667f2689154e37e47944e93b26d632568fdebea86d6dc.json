{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ferdi\\\\OneDrive\\\\Desktop\\\\Documents\\\\CAPSTONE\\\\frontend\\\\src\\\\context\\\\UserProgressContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProgressContext = /*#__PURE__*/createContext();\nexport const useUserProgress = () => {\n  _s();\n  return useContext(UserProgressContext);\n};\n_s(useUserProgress, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const UserProgressProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    currentUser\n  } = useAuth();\n  const [userProgress, setUserProgress] = useState({});\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Initial badges data\n  const initialBadges = [{\n    id: 1,\n    name: 'First Steps',\n    description: 'Complete your first practice problem',\n    icon: '👣',\n    points: 10\n  }, {\n    id: 2,\n    name: 'Quick Learner',\n    description: 'Complete 5 practice problems',\n    icon: '⚡',\n    points: 50\n  }, {\n    id: 3,\n    name: 'Math Master',\n    description: 'Score 100% on a challenge',\n    icon: '🏆',\n    points: 100\n  }, {\n    id: 4,\n    name: 'Property Pro',\n    description: 'Learn all multiplication properties',\n    icon: '📚',\n    points: 75\n  }, {\n    id: 5,\n    name: 'Perfect Score',\n    description: 'Get all answers correct in a game',\n    icon: '💯',\n    points: 150\n  }];\n  useEffect(() => {\n    // Load user progress from localStorage\n    const storedProgress = localStorage.getItem('userProgress');\n    if (storedProgress) {\n      setUserProgress(JSON.parse(storedProgress));\n    }\n    setLoading(false);\n  }, []);\n  const updateProgress = (userId, data) => {\n    const updatedProgress = {\n      ...userProgress,\n      [userId]: {\n        ...userProgress[userId],\n        ...data,\n        lastUpdated: new Date().toISOString()\n      }\n    };\n    setUserProgress(updatedProgress);\n    localStorage.setItem('userProgress', JSON.stringify(updatedProgress));\n    updateLeaderboard();\n  };\n  const addPoints = (userId, points) => {\n    var _userProgress$userId;\n    const currentPoints = ((_userProgress$userId = userProgress[userId]) === null || _userProgress$userId === void 0 ? void 0 : _userProgress$userId.points) || 0;\n    updateProgress(userId, {\n      points: currentPoints + points\n    });\n  };\n  const awardBadge = (userId, badgeId) => {\n    var _userProgress$userId2;\n    const userBadges = ((_userProgress$userId2 = userProgress[userId]) === null || _userProgress$userId2 === void 0 ? void 0 : _userProgress$userId2.badges) || [];\n    if (!userBadges.includes(badgeId)) {\n      const badge = initialBadges.find(b => b.id === badgeId);\n      if (badge) {\n        var _userProgress$userId3;\n        updateProgress(userId, {\n          badges: [...userBadges, badgeId],\n          points: (((_userProgress$userId3 = userProgress[userId]) === null || _userProgress$userId3 === void 0 ? void 0 : _userProgress$userId3.points) || 0) + badge.points\n        });\n      }\n    }\n  };\n  const updateLeaderboard = () => {\n    const leaderboardData = Object.entries(userProgress).map(([userId, data]) => {\n      var _data$badges;\n      return {\n        userId,\n        points: data.points || 0,\n        badges: ((_data$badges = data.badges) === null || _data$badges === void 0 ? void 0 : _data$badges.length) || 0,\n        lastUpdated: data.lastUpdated\n      };\n    }).sort((a, b) => b.points - a.points);\n    setLeaderboard(leaderboardData);\n  };\n  const getUserProgress = userId => {\n    return userProgress[userId] || {\n      points: 0,\n      badges: [],\n      completedProblems: [],\n      completedChallenges: []\n    };\n  };\n  const value = {\n    userProgress,\n    leaderboard,\n    initialBadges,\n    updateProgress,\n    addPoints,\n    awardBadge,\n    getUserProgress\n  };\n  return /*#__PURE__*/_jsxDEV(UserProgressContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s2(UserProgressProvider, \"egqdg7d+wZejDne2/PaZfGQYmqE=\", false, function () {\n  return [useAuth];\n});\n_c = UserProgressProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProgressProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useAuth","jsxDEV","_jsxDEV","UserProgressContext","useUserProgress","_s","UserProgressProvider","children","_s2","currentUser","userProgress","setUserProgress","leaderboard","setLeaderboard","loading","setLoading","initialBadges","id","name","description","icon","points","storedProgress","localStorage","getItem","JSON","parse","updateProgress","userId","data","updatedProgress","lastUpdated","Date","toISOString","setItem","stringify","updateLeaderboard","addPoints","_userProgress$userId","currentPoints","awardBadge","badgeId","_userProgress$userId2","userBadges","badges","includes","badge","find","b","_userProgress$userId3","leaderboardData","Object","entries","map","_data$badges","length","sort","a","getUserProgress","completedProblems","completedChallenges","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ferdi/OneDrive/Desktop/Documents/CAPSTONE/frontend/src/context/UserProgressContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst UserProgressContext = createContext();\r\n\r\nexport const useUserProgress = () => useContext(UserProgressContext);\r\n\r\nexport const UserProgressProvider = ({ children }) => {\r\n  const { currentUser } = useAuth();\r\n  const [userProgress, setUserProgress] = useState({});\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Initial badges data\r\n  const initialBadges = [\r\n    { id: 1, name: 'First Steps', description: 'Complete your first practice problem', icon: '👣', points: 10 },\r\n    { id: 2, name: 'Quick Learner', description: 'Complete 5 practice problems', icon: '⚡', points: 50 },\r\n    { id: 3, name: 'Math Master', description: 'Score 100% on a challenge', icon: '🏆', points: 100 },\r\n    { id: 4, name: 'Property Pro', description: 'Learn all multiplication properties', icon: '📚', points: 75 },\r\n    { id: 5, name: 'Perfect Score', description: 'Get all answers correct in a game', icon: '💯', points: 150 }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // Load user progress from localStorage\r\n    const storedProgress = localStorage.getItem('userProgress');\r\n    if (storedProgress) {\r\n      setUserProgress(JSON.parse(storedProgress));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const updateProgress = (userId, data) => {\r\n    const updatedProgress = {\r\n      ...userProgress,\r\n      [userId]: {\r\n        ...userProgress[userId],\r\n        ...data,\r\n        lastUpdated: new Date().toISOString()\r\n      }\r\n    };\r\n    setUserProgress(updatedProgress);\r\n    localStorage.setItem('userProgress', JSON.stringify(updatedProgress));\r\n    updateLeaderboard();\r\n  };\r\n\r\n  const addPoints = (userId, points) => {\r\n    const currentPoints = userProgress[userId]?.points || 0;\r\n    updateProgress(userId, { points: currentPoints + points });\r\n  };\r\n\r\n  const awardBadge = (userId, badgeId) => {\r\n    const userBadges = userProgress[userId]?.badges || [];\r\n    if (!userBadges.includes(badgeId)) {\r\n      const badge = initialBadges.find(b => b.id === badgeId);\r\n      if (badge) {\r\n        updateProgress(userId, {\r\n          badges: [...userBadges, badgeId],\r\n          points: (userProgress[userId]?.points || 0) + badge.points\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateLeaderboard = () => {\r\n    const leaderboardData = Object.entries(userProgress)\r\n      .map(([userId, data]) => ({\r\n        userId,\r\n        points: data.points || 0,\r\n        badges: data.badges?.length || 0,\r\n        lastUpdated: data.lastUpdated\r\n      }))\r\n      .sort((a, b) => b.points - a.points);\r\n    setLeaderboard(leaderboardData);\r\n  };\r\n\r\n  const getUserProgress = (userId) => {\r\n    return userProgress[userId] || {\r\n      points: 0,\r\n      badges: [],\r\n      completedProblems: [],\r\n      completedChallenges: []\r\n    };\r\n  };\r\n\r\n  const value = {\r\n    userProgress,\r\n    leaderboard,\r\n    initialBadges,\r\n    updateProgress,\r\n    addPoints,\r\n    awardBadge,\r\n    getUserProgress\r\n  };\r\n\r\n  return (\r\n    <UserProgressContext.Provider value={value}>\r\n      {!loading && children}\r\n    </UserProgressContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}